apiVersion: apps/v1
kind: Deployment
metadata:
  name: vm-operator
  namespace: orchard-system
  labels:
    app: vm-operator
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vm-operator
  template:
    metadata:
      labels:
        app: vm-operator
    spec:
      serviceAccountName: vm-operator
      containers:
      - name: vm-operator
        image: megalopolis/vm-operator:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: TART_HOME
          value: "/host/.tart"
        - name: PATH
          value: "/app/bin:/usr/local/bin:/usr/bin:/bin"
        volumeMounts:
        - name: tart-binary
          mountPath: /app/bin/tart-binary
          readOnly: true
        - name: tart-storage
          mountPath: /host/.tart
        - name: logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      volumes:
      - name: tart-binary
        hostPath:
          path: /Users/diego/Developer/workspace/matdotcx/megalopolis/tart-binary
          type: File
      - name: tart-storage
        hostPath:
          path: /Users/diego/.tart
          type: DirectoryOrCreate
      - name: logs
        emptyDir: {}
      # Note: Running on Linux nodes, accessing macOS host via mounted volumes
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vm-operator
  namespace: orchard-system
  labels:
    app: vm-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vm-operator
  labels:
    app: vm-operator
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vm-operator
  labels:
    app: vm-operator
subjects:
- kind: ServiceAccount
  name: vm-operator
  namespace: orchard-system
roleRef:
  kind: ClusterRole
  name: vm-operator
  apiGroup: rbac.authorization.k8s.io