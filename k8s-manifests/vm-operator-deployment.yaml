apiVersion: apps/v1
kind: Deployment
metadata:
  name: vm-operator
  namespace: orchard-system
  labels:
    app: vm-operator
    app.kubernetes.io/name: vm-operator
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: megalopolis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vm-operator
  template:
    metadata:
      labels:
        app: vm-operator
        app.kubernetes.io/name: vm-operator
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: vm-operator
      containers:
      - name: vm-operator
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          apk add --no-cache curl bash
          mkdir -p /app
          cat > /app/vm-operator.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          # VM Operator - Kubernetes-native VM management
          # This replaces the Docker-dependent Orchard controller
          
          log() {
            echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] $1"
          }
          
          # Health check endpoint
          start_health_server() {
            while true; do
              echo -e "HTTP/1.1 200 OK\r\nContent-Length: 2\r\n\r\nOK" | nc -l -p 8080 || true
              sleep 1
            done &
          }
          
          # Main operator loop
          main() {
            log "Starting VM Operator..."
            
            # Start health check server
            start_health_server
            
            log "VM Operator ready - Kubernetes-native VM management"
            log "Note: VM operations are handled via Tart CLI on the host"
            log "API endpoints:"
            log "  GET /health - Health check"
            log "  GET /vms - List VMs (placeholder)"
            
            # Keep container running
            while true; do
              log "VM Operator running... (checking every 30s)"
              sleep 30
            done
          }
          
          main
          EOF
          
          chmod +x /app/vm-operator.sh
          exec /app/vm-operator.sh
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      # No special security context needed since we're not accessing Docker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
---
apiVersion: v1
kind: Service
metadata:
  name: vm-operator
  namespace: orchard-system
  labels:
    app: vm-operator
    app.kubernetes.io/name: vm-operator
    app.kubernetes.io/component: service
spec:
  selector:
    app: vm-operator
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP